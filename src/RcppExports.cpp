// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// logSumExp
double logSumExp(const arma::rowvec& x);
RcppExport SEXP _cyclinbayes_logSumExp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logSumExp(x));
    return rcpp_result_gen;
END_RCPP
}
// log_dgamma
double log_dgamma(double x, double a, double b);
RcppExport SEXP _cyclinbayes_log_dgamma(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(log_dgamma(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// BayesSCLingam_cpp
List BayesSCLingam_cpp(arma::mat data_matrix, double a_mu, double b_mu, double a_gamma, double b_gamma, double a_tao, double b_tao, double a_og_tao, double b_og_tao, double a_gamma_1, double b_gamma_1, double alpha, double M, double num_iter);
RcppExport SEXP _cyclinbayes_BayesSCLingam_cpp(SEXP data_matrixSEXP, SEXP a_muSEXP, SEXP b_muSEXP, SEXP a_gammaSEXP, SEXP b_gammaSEXP, SEXP a_taoSEXP, SEXP b_taoSEXP, SEXP a_og_taoSEXP, SEXP b_og_taoSEXP, SEXP a_gamma_1SEXP, SEXP b_gamma_1SEXP, SEXP alphaSEXP, SEXP MSEXP, SEXP num_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data_matrix(data_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type b_mu(b_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_gamma(a_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type b_gamma(b_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type a_tao(a_taoSEXP);
    Rcpp::traits::input_parameter< double >::type b_tao(b_taoSEXP);
    Rcpp::traits::input_parameter< double >::type a_og_tao(a_og_taoSEXP);
    Rcpp::traits::input_parameter< double >::type b_og_tao(b_og_taoSEXP);
    Rcpp::traits::input_parameter< double >::type a_gamma_1(a_gamma_1SEXP);
    Rcpp::traits::input_parameter< double >::type b_gamma_1(b_gamma_1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type num_iter(num_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesSCLingam_cpp(data_matrix, a_mu, b_mu, a_gamma, b_gamma, a_tao, b_tao, a_og_tao, b_og_tao, a_gamma_1, b_gamma_1, alpha, M, num_iter));
    return rcpp_result_gen;
END_RCPP
}
// BCD_cpp
List BCD_cpp(arma::mat data_matrix, double a_mu, double b_mu, double a_gamma, double b_gamma, double a_tao, double b_tao, double a_gamma_1, double b_gamma_1, double alpha, double M, double num_iter);
RcppExport SEXP _cyclinbayes_BCD_cpp(SEXP data_matrixSEXP, SEXP a_muSEXP, SEXP b_muSEXP, SEXP a_gammaSEXP, SEXP b_gammaSEXP, SEXP a_taoSEXP, SEXP b_taoSEXP, SEXP a_gamma_1SEXP, SEXP b_gamma_1SEXP, SEXP alphaSEXP, SEXP MSEXP, SEXP num_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data_matrix(data_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type b_mu(b_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_gamma(a_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type b_gamma(b_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type a_tao(a_taoSEXP);
    Rcpp::traits::input_parameter< double >::type b_tao(b_taoSEXP);
    Rcpp::traits::input_parameter< double >::type a_gamma_1(a_gamma_1SEXP);
    Rcpp::traits::input_parameter< double >::type b_gamma_1(b_gamma_1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type num_iter(num_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(BCD_cpp(data_matrix, a_mu, b_mu, a_gamma, b_gamma, a_tao, b_tao, a_gamma_1, b_gamma_1, alpha, M, num_iter));
    return rcpp_result_gen;
END_RCPP
}
// posterior_mean_adjacency
arma::mat posterior_mean_adjacency(arma::mat Adjacency_matrix_samples, double num_features);
RcppExport SEXP _cyclinbayes_posterior_mean_adjacency(SEXP Adjacency_matrix_samplesSEXP, SEXP num_featuresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Adjacency_matrix_samples(Adjacency_matrix_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type num_features(num_featuresSEXP);
    rcpp_result_gen = Rcpp::wrap(posterior_mean_adjacency(Adjacency_matrix_samples, num_features));
    return rcpp_result_gen;
END_RCPP
}
// posterior_mean_adjacency_threshold
arma::mat posterior_mean_adjacency_threshold(arma::mat Adjacency_matrix_samples, double num_features, double threshold);
RcppExport SEXP _cyclinbayes_posterior_mean_adjacency_threshold(SEXP Adjacency_matrix_samplesSEXP, SEXP num_featuresSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Adjacency_matrix_samples(Adjacency_matrix_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(posterior_mean_adjacency_threshold(Adjacency_matrix_samples, num_features, threshold));
    return rcpp_result_gen;
END_RCPP
}
// percentile_ci_causal_mat
arma::mat percentile_ci_causal_mat(const arma::mat& samples, double lower, double upper);
RcppExport SEXP _cyclinbayes_percentile_ci_causal_mat(SEXP samplesSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(percentile_ci_causal_mat(samples, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// hpd_ci_mat
List hpd_ci_mat(const arma::mat& Causal_effect_matrix_list, double cred_mass);
RcppExport SEXP _cyclinbayes_hpd_ci_mat(SEXP Causal_effect_matrix_listSEXP, SEXP cred_massSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Causal_effect_matrix_list(Causal_effect_matrix_listSEXP);
    Rcpp::traits::input_parameter< double >::type cred_mass(cred_massSEXP);
    rcpp_result_gen = Rcpp::wrap(hpd_ci_mat(Causal_effect_matrix_list, cred_mass));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cyclinbayes_logSumExp", (DL_FUNC) &_cyclinbayes_logSumExp, 1},
    {"_cyclinbayes_log_dgamma", (DL_FUNC) &_cyclinbayes_log_dgamma, 3},
    {"_cyclinbayes_BayesSCLingam_cpp", (DL_FUNC) &_cyclinbayes_BayesSCLingam_cpp, 14},
    {"_cyclinbayes_BCD_cpp", (DL_FUNC) &_cyclinbayes_BCD_cpp, 12},
    {"_cyclinbayes_posterior_mean_adjacency", (DL_FUNC) &_cyclinbayes_posterior_mean_adjacency, 2},
    {"_cyclinbayes_posterior_mean_adjacency_threshold", (DL_FUNC) &_cyclinbayes_posterior_mean_adjacency_threshold, 3},
    {"_cyclinbayes_percentile_ci_causal_mat", (DL_FUNC) &_cyclinbayes_percentile_ci_causal_mat, 3},
    {"_cyclinbayes_hpd_ci_mat", (DL_FUNC) &_cyclinbayes_hpd_ci_mat, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cyclinbayes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
